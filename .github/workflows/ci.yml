name: 🚀 spot-diggz CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust API のテスト・ビルド
  rust-ci:
    name: 🦀 Rust API CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/api
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: 📦 Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: 📋 Check code formatting
        run: cargo fmt -- --check
        
      - name: 🔍 Run Clippy lints
        run: cargo clippy -- -D warnings
        
      - name: 🧪 Run unit tests
        run: cargo test --verbose
        
      - name: 🏗️ Build release binary
        run: cargo build --release --verbose

  # React UI のテスト・ビルド
  react-ci:
    name: ⚛️ React UI CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/ui
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/ui/package-lock.json
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint
        run: npm run lint
        
      - name: 📋 Check TypeScript types
        run: npm run type-check
        
      - name: 🧪 Run unit tests
        run: npm test -- --coverage --watchAll=false
        
      - name: 🏗️ Build production bundle
        run: npm run build
        
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./src/ui/coverage

  # Terraform 設定検証
  terraform-ci:
    name: 🏗️ Terraform CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./resources
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          
      - name: 📋 Format check
        run: terraform fmt -check -recursive
        
      - name: 🔍 Validate configuration
        run: terraform init -backend=false && terraform validate
        
      - name: 🛡️ Security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: resources

  # Docker イメージビルド
  docker-ci:
    name: 🐳 Docker CI
    runs-on: ubuntu-latest
    needs: [rust-ci, react-ci]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # セキュリティスキャン
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 依存関係チェック
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # 開発環境デプロイ（自動）
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [rust-ci, react-ci, terraform-ci]
    if: github.ref == 'refs/heads/feature/replace' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
          
      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          
      - name: 🌍 Deploy infrastructure
        working-directory: ./resources
        run: |
          terraform init
          terraform workspace select dev || terraform workspace new dev
          terraform plan -var-file=environments/dev/terraform.tfvars
          terraform apply -auto-approve -var-file=environments/dev/terraform.tfvars
          
      - name: 📱 Deploy applications
        run: |
          echo "🚀 Deploying applications to development environment..."
          # TODO: Cloud Run デプロイメント追加

  # ステージング環境デプロイ（手動承認）
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [rust-ci, react-ci, terraform-ci]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STG }}
          
      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: 🌍 Deploy to staging
        run: |
          echo "🎭 Deploying to staging environment..."
          # TODO: ステージング環境デプロイ処理

  # 本番環境デプロイ（手動承認 + レビュー必須）
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [rust-ci, react-ci, terraform-ci, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
          
      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          # TODO: 本番環境デプロイ処理

  # 通知
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [rust-ci, react-ci, terraform-ci]
    if: always()
    
    steps:
      - name: 📢 Notify status
        run: |
          if [[ "${{ needs.rust-ci.result }}" == "success" && "${{ needs.react-ci.result }}" == "success" && "${{ needs.terraform-ci.result }}" == "success" ]]; then
            echo "✅ All CI jobs passed successfully!"
          else
            echo "❌ Some CI jobs failed. Please check the logs."
            exit 1
          fi